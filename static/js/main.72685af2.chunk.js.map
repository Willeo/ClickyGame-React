{"version":3,"sources":["components/grid/Col.js","components/grid/Row.js","components/grid/Container.js","components/grid/index.js","components/index.js","utils/API.js","App.js","serviceWorker.js","index.js","components/Header.js","components/ImgContainer.js","components/Card.js"],"names":["Col","_ref","vp","size","children","classes","react_default","a","createElement","className","concat","Row","Container","fluid","__webpack_require__","d","__webpack_exports__","Col_Col","Row_Row","Container_Container","_Header__WEBPACK_IMPORTED_MODULE_0__","_Footer__WEBPACK_IMPORTED_MODULE_1__","o","_ImgContainer__WEBPACK_IMPORTED_MODULE_2__","_Card__WEBPACK_IMPORTED_MODULE_3__","API","query","limit","qstring","process","axios","get","App","state","score","topScore","guess","pics","alreadyGuessed","_this2","this","undefined","then","data","filter","pic","i","fHeight","images","fixed_width_still","height","setState","event","preventDefault","cont","id","target","_this$state","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","err","return","push","shuffle","_this3","_this$state2","grid","components","map","key","image","url","onClick","buttonClick","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","Header","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_grid__WEBPACK_IMPORTED_MODULE_1__","styles","h1","backgroundColor","color","style","ImgContainer","___WEBPACK_IMPORTED_MODULE_1__","alt","src","Card"],"mappings":"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","file":"static/js/main.72685af2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Col = ({ vp, size, children, classes }) => (\r\n    <div className={`col-${vp || 'md'}${size && '-' + size}${classes ? classes + ' ' : ''}`}>{children}</div>\r\n);\r\n","import React from 'react';\r\n\r\nexport const Row = ({ classes, children }) => <div className={`row${classes ? ' ' + classes : ''}`}>{children}</div>;\r\n","import React from 'react';\r\n\r\nexport const Container = ({ fluid, children, classes }) => (\r\n    <div className={`container${fluid ? '-fluid' : ''}${classes ? ' ' + classes : ''}`}>{children}</div>\r\n);\r\n","export * from './Col';\r\nexport * from './Row';\r\nexport * from './Container';\r\n","export * from './Header';\r\nexport * from './Footer';\r\nexport * from './ImgContainer';\r\nexport * from './Card';\r\n","import axios from 'axios';\r\nconst apiKey = process.env.REACT_APP_GIPHY_API_KEY;\r\nexport default {\r\n    getImages: (query, limit) => {\r\n        let qstring = `https://api.giphy.com/v1/gifs/search?q=${query || 'rick and morty'}&limit=${limit ||\r\n            8}&rating=g&api_key=${apiKey}`;\r\n        return axios.get(qstring);\r\n    },\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Header, ImgContainer } from './components';\r\nimport { Col, Row, Container } from './components/grid';\r\nimport API from './utils/API';\r\nimport shuffle from 'shuffle-array';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        score: 0,\r\n        topScore: 0,\r\n        guess: null,\r\n        pics: [],\r\n        alreadyGuessed: [],\r\n    };\r\n    componentDidMount() {\r\n        API.getImages(undefined, '33').then(data => {\r\n            data = data.data.data.filter((pic, i, pics) => {\r\n                let fHeight = pics[0].images.fixed_width_still.height;\r\n                return pic.images.fixed_width_still.height === fHeight;\r\n            });\r\n            this.setState({ pics: data });\r\n        });\r\n    }\r\n    buttonClick(event) {\r\n        event.preventDefault();\r\n        let cont = true;\r\n        const { id } = event.target;\r\n        let { alreadyGuessed, score, topScore, pics, guess } = this.state;\r\n        score++;\r\n        score > topScore && topScore++;\r\n        guess = true;\r\n        for (let x of alreadyGuessed) {\r\n            if (id === x) {\r\n                cont = false;\r\n                break;\r\n            }\r\n        }\r\n        if (cont) {\r\n            alreadyGuessed.push(id);\r\n        } else {\r\n            alreadyGuessed = [];\r\n            score = 0;\r\n            guess = false;\r\n        }\r\n        pics = shuffle(pics);\r\n        this.setState({ alreadyGuessed: alreadyGuessed, score: score, topScore: topScore, pics: pics, guess: guess });\r\n    }\r\n    render() {\r\n        let { score, topScore, guess, alreadyGuessed, pics } = this.state;\r\n        return (\r\n            <div className=\"App\">\r\n                <Container fluid={true}>\r\n                    <Header score={score} topScore={topScore} guess={guess} />\r\n                </Container>\r\n                <Container>\r\n                    <Row>\r\n                        {pics.map(pic => {\r\n                            return (\r\n                                <Col size=\"3\" key={pic.id}>\r\n                                    <ImgContainer\r\n                                        id={pic.id}\r\n                                        image={pic.images.fixed_width_still.url}\r\n                                        onClick={this.buttonClick.bind(this)}\r\n                                    />\r\n                                    <br />\r\n                                </Col>\r\n                            );\r\n                        })}\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Col, Row } from './grid';\r\nimport './Header.css';\r\nlet styles = {\r\n    h1: '5.5em',\r\n    backgroundColor: 'green',\r\n    color: 'white',\r\n};\r\nexport const Header = ({ guess, score, topScore }) => (\r\n    <div className=\"jumbotron\" style={styles}>\r\n        <Row>\r\n            <Col size=\"6\">\r\n                <h1 className=\"text-center\">Memory Game</h1>\r\n            </Col>\r\n            <Col size=\"6\">\r\n                <h4 className=\"text-center\">{guess ? 'You guessed correctly!' : 'You guessed incorrectly.'}</h4>\r\n            </Col>\r\n            <Col size=\"6\">\r\n                <h4 className=\"text-center\">\r\n                    Score:{score} | Top Score:{topScore}\r\n                </h4>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { Card } from './';\r\nexport const ImgContainer = ({ image, onClick, id }) => (\r\n    <Card>\r\n        <button onClick={onClick}>\r\n            <img id={id} alt=\"\" src={image} />\r\n        </button>\r\n    </Card>\r\n);\r\n","import React from 'react';\r\n\r\nexport const Card = ({children}) => (\r\n    <div className=\"card\">\r\n        <div className=\"card-body\">\r\n            {children}\r\n        </div>\r\n    </div>\r\n)"],"sourceRoot":""}